// Generated by gencpp from file jetson_camera/FACEdata.msg
// DO NOT EDIT!


#ifndef JETSON_CAMERA_MESSAGE_FACEDATA_H
#define JETSON_CAMERA_MESSAGE_FACEDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetson_camera
{
template <class ContainerAllocator>
struct FACEdata_
{
  typedef FACEdata_<ContainerAllocator> Type;

  FACEdata_()
    : name()
    , move(0)
    , rotate(0)
    , perfect(0)  {
    }
  FACEdata_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , move(0)
    , rotate(0)
    , perfect(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _move_type;
  _move_type move;

   typedef int32_t _rotate_type;
  _rotate_type rotate;

   typedef int32_t _perfect_type;
  _perfect_type perfect;





  typedef boost::shared_ptr< ::jetson_camera::FACEdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetson_camera::FACEdata_<ContainerAllocator> const> ConstPtr;

}; // struct FACEdata_

typedef ::jetson_camera::FACEdata_<std::allocator<void> > FACEdata;

typedef boost::shared_ptr< ::jetson_camera::FACEdata > FACEdataPtr;
typedef boost::shared_ptr< ::jetson_camera::FACEdata const> FACEdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetson_camera::FACEdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetson_camera::FACEdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetson_camera::FACEdata_<ContainerAllocator1> & lhs, const ::jetson_camera::FACEdata_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.move == rhs.move &&
    lhs.rotate == rhs.rotate &&
    lhs.perfect == rhs.perfect;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetson_camera::FACEdata_<ContainerAllocator1> & lhs, const ::jetson_camera::FACEdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetson_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetson_camera::FACEdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetson_camera::FACEdata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetson_camera::FACEdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetson_camera::FACEdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetson_camera::FACEdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetson_camera::FACEdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetson_camera::FACEdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7fe059ba6e6fe4aad3486da4b5afd08";
  }

  static const char* value(const ::jetson_camera::FACEdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7fe059ba6e6fe4aULL;
  static const uint64_t static_value2 = 0xad3486da4b5afd08ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetson_camera::FACEdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetson_camera/FACEdata";
  }

  static const char* value(const ::jetson_camera::FACEdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetson_camera::FACEdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# FACEdata.msg\n"
"string name\n"
"int32 move\n"
"int32 rotate\n"
"int32 perfect\n"
;
  }

  static const char* value(const ::jetson_camera::FACEdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetson_camera::FACEdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.move);
      stream.next(m.rotate);
      stream.next(m.perfect);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FACEdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetson_camera::FACEdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetson_camera::FACEdata_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "move: ";
    Printer<int32_t>::stream(s, indent + "  ", v.move);
    s << indent << "rotate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rotate);
    s << indent << "perfect: ";
    Printer<int32_t>::stream(s, indent + "  ", v.perfect);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETSON_CAMERA_MESSAGE_FACEDATA_H
